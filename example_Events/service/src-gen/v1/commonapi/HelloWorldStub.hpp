/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.1.12.v201907221047.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_Hello_World_STUB_HPP_
#define V1_COMMONAPI_Hello_World_STUB_HPP_

#include <functional>
#include <sstream>




#include <v1/commonapi/HelloWorld.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <vector>


#include <CommonAPI/Stub.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace commonapi {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service HelloWorld. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class HelloWorldStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual HelloWorld {
 public:

    /**
     * Sends a selective broadcast event for notifyOnChange. Should not be called directly.
     * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
     */
    virtual void fireNotifyOnChangeSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_message) = 0;
    virtual void sendNotifyOnChangeSelective(const std::string &_message, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    virtual void subscribeFornotifyOnChangeSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) = 0;
    virtual void unsubscribeFromnotifyOnChangeSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyOnChangeSelective() = 0;


    virtual void deactivateManagedInstances() = 0;


protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
    std::shared_ptr<CommonAPI::ClientIdList> subscribersForNotifyOnChangeSelective_;

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for HelloWorld.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class HelloWorldStubRemoteEvent
{
public:
    virtual ~HelloWorldStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service HelloWorld to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class HelloWorldStub
    : public virtual CommonAPI::Stub<HelloWorldStubAdapter, HelloWorldStubRemoteEvent>
{
public:
    typedef std::function<void (std::string _message)>sayHelloReply_t;

    virtual ~HelloWorldStub() {}
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> clientId) = 0;
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }


    /// This is the method that will be called on remote calls on the method sayHello.
    virtual void sayHello(const std::shared_ptr<CommonAPI::ClientId> _client, std::string _name, sayHelloReply_t _reply) = 0;
    /**
     * Sends a selective broadcast event for notifyOnChange to the given ClientIds.
     * The ClientIds must all be out of the set of subscribed clients.
     * If no ClientIds are given, the selective broadcast is sent to all subscribed clients.
     */
    virtual void fireNotifyOnChangeSelective(const std::string &_message, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) = 0;
    /// retrieves the list of all subscribed clients for notifyOnChange
    virtual std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyOnChangeSelective() {
        auto stubAdapter = CommonAPI::Stub<HelloWorldStubAdapter, HelloWorldStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            return(stubAdapter->getSubscribersForNotifyOnChangeSelective());
        else
            return NULL;
    }
    /// Hook method for reacting on new subscriptions or removed subscriptions respectively for selective broadcasts.
    virtual void onNotifyOnChangeSelectiveSubscriptionChanged(const std::shared_ptr<CommonAPI::ClientId> _client, const CommonAPI::SelectiveBroadcastSubscriptionEvent _event) = 0;
    /// Hook method for reacting accepting or denying new subscriptions
    virtual bool onNotifyOnChangeSelectiveSubscriptionRequested(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    virtual void sendNotifyOnChangeSelective(const std::string &_message, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr) {
        auto stubAdapter = CommonAPI::Stub<HelloWorldStubAdapter, HelloWorldStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->sendNotifyOnChangeSelective(_message, _receivers);
    }

    
    using CommonAPI::Stub<HelloWorldStubAdapter, HelloWorldStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<HelloWorldStubAdapter, HelloWorldStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<HelloWorldStubAdapter, HelloWorldStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef HelloWorldStubRemoteEvent RemoteEventType;
    typedef HelloWorld StubInterface;
};

} // namespace commonapi
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COMMONAPI_Hello_World_STUB_HPP_
