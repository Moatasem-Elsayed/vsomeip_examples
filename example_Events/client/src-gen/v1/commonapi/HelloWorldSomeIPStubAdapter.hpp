/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.someip 3.1.12.v201706201046.
* Used org.franca.core 0.9.1.201412191134.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COMMONAPI_HELLO_WORLD_SOMEIP_STUB_ADAPTER_HPP_
#define V1_COMMONAPI_HELLO_WORLD_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/commonapi/HelloWorldStub.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#undef COMMONAPI_INTERNAL_COMPILATION

namespace v1 {
namespace commonapi {

template <typename _Stub = ::v1::commonapi::HelloWorldStub, typename... _Stubs>
class HelloWorldSomeIPStubAdapterInternal
    : public virtual HelloWorldStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> HelloWorldSomeIPStubAdapterHelper;

    ~HelloWorldSomeIPStubAdapterInternal() {
        CommonAPI::SomeIP::StubAdapter::connection_->unregisterSubsciptionHandler(CommonAPI::SomeIP::StubAdapter::getSomeIpAddress(), 0x64);
        deactivateManagedInstances();
        HelloWorldSomeIPStubAdapterHelper::deinit();
    }

    void fireNotifyOnChangeSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_message);
    void sendNotifyOnChangeSelective(const std::string &_message, const std::shared_ptr<CommonAPI::ClientIdList> _receivers = nullptr);
    void subscribeFornotifyOnChangeSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success);
    void unsubscribeFromnotifyOnChangeSelective(const std::shared_ptr<CommonAPI::ClientId> clientId);
    std::shared_ptr<CommonAPI::ClientIdList> const getSubscribersForNotifyOnChangeSelective();

    void deactivateManagedInstances() {
    }

    static CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::commonapi::HelloWorldStub,
        CommonAPI::Version
    > getHelloWorldInterfaceVersionStubDispatcher;


    
    static CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::commonapi::HelloWorldStub,
        std::tuple< std::string>,
        std::tuple< std::string>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>
    > sayHelloStubDispatcher;

    HelloWorldSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        HelloWorldSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< HelloWorldStub>(_stub))
    {

        
                HelloWorldSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7918) }, &sayHelloStubDispatcher );
        subscribersForNotifyOnChangeSelective_ = std::make_shared<CommonAPI::ClientIdList>();
        CommonAPI::SomeIP::SubsciptionHandler_t NotifyOnChangeSelectiveEventSubscribeHandler =
            std::bind(&HelloWorldSomeIPStubAdapterInternal::NotifyOnChangeSelectiveEventHandler,
            this, std::placeholders::_1, std::placeholders::_2);

        CommonAPI::SomeIP::StubAdapter::connection_->registerSubsciptionHandler(CommonAPI::SomeIP::StubAdapter::getSomeIpAddress(), 0x64, NotifyOnChangeSelectiveEventSubscribeHandler);

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x64));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8001), itsEventGroups, false);
        }
    }

private:
std::mutex NotifyOnChangeSelectiveEventMutex_;
bool NotifyOnChangeSelectiveEventHandler(CommonAPI::SomeIP::client_id_t _client, bool subscribe);
};

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::GetAttributeStubDispatcher<
    ::v1::commonapi::HelloWorldStub,
    CommonAPI::Version
    > HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>::getHelloWorldInterfaceVersionStubDispatcher(&HelloWorldStub::getInterfaceVersion, false);

template <typename _Stub, typename... _Stubs>
CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
    ::v1::commonapi::HelloWorldStub,
    std::tuple< std::string>,
    std::tuple< std::string>,
    std::tuple< CommonAPI::SomeIP::StringDeployment>,
    std::tuple< CommonAPI::SomeIP::StringDeployment>
> HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>::sayHelloStubDispatcher(
    &HelloWorldStub::sayHello,
    false,
    std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
    std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)));

template <typename _Stub, typename... _Stubs>
void HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireNotifyOnChangeSelective(const std::shared_ptr<CommonAPI::ClientId> _client, const std::string &_message) {
    std::shared_ptr<CommonAPI::SomeIP::ClientId> client = std::dynamic_pointer_cast<CommonAPI::SomeIP::ClientId, CommonAPI::ClientId>(_client);
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployed_message(_message, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    if (client) {
        CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
        >>
          ::sendEvent(
              client->getClientId(),
              *this,
              CommonAPI::SomeIP::event_id_t(0x8001),
              false,
               deployed_message 
          );
   }
}

template <typename _Stub, typename... _Stubs>
void HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>::sendNotifyOnChangeSelective(const std::string &_message, const std::shared_ptr<CommonAPI::ClientIdList> _receivers) {
    std::shared_ptr<CommonAPI::ClientIdList> actualReceiverList;
    actualReceiverList = _receivers;

    if(_receivers == NULL) {
        std::lock_guard < std::mutex > itsLock(NotifyOnChangeSelectiveEventMutex_);
        if (subscribersForNotifyOnChangeSelective_ != NULL)
            actualReceiverList = std::make_shared<CommonAPI::ClientIdList>(*subscribersForNotifyOnChangeSelective_);
    }

    if(actualReceiverList == NULL)
        return;

    for (auto clientIdIterator = actualReceiverList->cbegin();
               clientIdIterator != actualReceiverList->cend();
               clientIdIterator++) {
        bool found(false);
        {
            std::lock_guard < std::mutex > itsLock(NotifyOnChangeSelectiveEventMutex_);
            found = (subscribersForNotifyOnChangeSelective_->find(*clientIdIterator) != subscribersForNotifyOnChangeSelective_->end());
        }
        if(_receivers == NULL || found) {
            fireNotifyOnChangeSelective(*clientIdIterator, _message);
        }
    }
}

template <typename _Stub, typename... _Stubs>
void HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>::subscribeFornotifyOnChangeSelective(const std::shared_ptr<CommonAPI::ClientId> clientId, bool& success) {
    bool ok = HelloWorldSomeIPStubAdapterHelper::stub_->onNotifyOnChangeSelectiveSubscriptionRequested(clientId);
    if (ok) {
        {
            std::lock_guard<std::mutex> itsLock(NotifyOnChangeSelectiveEventMutex_);
            subscribersForNotifyOnChangeSelective_->insert(clientId);
        }
        HelloWorldSomeIPStubAdapterHelper::stub_->onNotifyOnChangeSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::SUBSCRIBED);
        success = true;
    } else {
        success = false;
    }
}
template <typename _Stub, typename... _Stubs>
void HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>::unsubscribeFromnotifyOnChangeSelective(const std::shared_ptr<CommonAPI::ClientId> clientId) {
    HelloWorldSomeIPStubAdapterHelper::stub_->onNotifyOnChangeSelectiveSubscriptionChanged(clientId, CommonAPI::SelectiveBroadcastSubscriptionEvent::UNSUBSCRIBED);
    {
        std::lock_guard<std::mutex> itsLock(NotifyOnChangeSelectiveEventMutex_);
        subscribersForNotifyOnChangeSelective_->erase(clientId);
    }
}

template <typename _Stub, typename... _Stubs>
std::shared_ptr<CommonAPI::ClientIdList> const HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>::getSubscribersForNotifyOnChangeSelective() {
    std::lock_guard<std::mutex> itsLock(NotifyOnChangeSelectiveEventMutex_);
    return std::make_shared<CommonAPI::ClientIdList>(*subscribersForNotifyOnChangeSelective_);
}

template <typename _Stub, typename... _Stubs>
bool HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>::NotifyOnChangeSelectiveEventHandler(CommonAPI::SomeIP::client_id_t _client, bool subscribe) {
    std::shared_ptr<CommonAPI::SomeIP::ClientId> clientId = std::make_shared<CommonAPI::SomeIP::ClientId>(CommonAPI::SomeIP::ClientId(_client));
    bool result = true;
    if (subscribe) {
        subscribeFornotifyOnChangeSelective(clientId, result);
    } else {
        unsubscribeFromnotifyOnChangeSelective(clientId);
    }
    return result;
}


template <typename _Stub = ::v1::commonapi::HelloWorldStub, typename... _Stubs>
class HelloWorldSomeIPStubAdapter
    : public HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>,
      public std::enable_shared_from_this< HelloWorldSomeIPStubAdapter<_Stub, _Stubs...>> {
public:
    HelloWorldSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          HelloWorldSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace commonapi
} // namespace v1

#endif // V1_COMMONAPI_Hello_World_SOMEIP_STUB_ADAPTER_HPP_
